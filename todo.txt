/make lexer recognize arglists of anonymous functions
redesgin ast to support lvalues, decompositions, etc
redesign parser recognition of control structures
implement big numbers, matrices, complex numbers, etc...
... so we can use THE SAME STRUCTURES in the ast as will be in the environment.
booleans
implement the rest of parse_arith_contained
lex and parse units
lex and parse lists
lex and parse complex numbers
implement environment
implement closure capturing
implement interpreter for all existing control structures and operations
-> Alpha 1.0

multithreaded lex, parse, execute
command line interface
actual error reporting. with the detail of rust if possible
-> Alpha 2.0

inner products <a|b>
cross products [a,b]
speedy speedy matrix operations
-> Alpha 2.1

modules and importing code
standard units file
-> Alpha 3.0

chars
strings
other string related bleh
-> Alpha 3.1

object oriented design -> enums, structs (no methods), classes (methods, inheritance)
-> Beta 1.0

code interoperability oh god kill me
but holy shit that would be cool right
-> Beta 2.0

future stuff in no particular order:
vim syntax file for pretty colors!
hey..uh.....compiler? ....fortran maybe?
i just realized how absurdly difficult it would be to import compiled muon in to scripted muon like python do.
build website?
RELEASE TO DEBIAN REPOS???? (only if on a version stabler than my emotional affect)
