Variables and Values:
var x = 2
val e = 2.71

Scopes:
{
	stuff
}
val a = {
	val m = prefill(1, [3,4])
	<- m
}

Lazy Evaluation:
var x -> 7*a
var y -> {
	<- x^2
}

Function defs:
fn hello(world) -> print world
fn foo(bar) -> {
	val barPrime = 1/bar
	<- barPrime ^ 2
}

Anonymous Functions:
val f = (x) -> {
	<- x-2
}
print hof( (asdf) -> asdf + 6 )

Shadowing:
var x = 2
var y = {
	var x = 3
	x += 1
	<- x
}
print y // 4
print x // 2

Capturing:
fn cap(meh) -> |x,y| {
	<- meh * x * y
}
[x,y] = [0,0]
print cap(3) // 24
// Note you don't need to capture. If you don't capture, it will look outside scope

Matrices:
var m = [2,3;4,5;6,7]
m[2,1] = 2
m[2][1] = 2

Ranges:
var r = [3:6) // 3,4,5
r = (2,5] // 3,4,5
r = [3:5] // guess what
r = (2:6) // its the same
r = [3:1:5] // shocker
r = [3:2:5] // oh shit plot twist
// ya get the point

Matrix Range Access:
m[:,2] = 7
m[1:2,1] = 4
m[1:3)[1:2] = -1

Units!
var d = 5[m]
var v = d / 2[s]
val [w,h] = [3,4][ft]

Unit Operations:
var a = v&[m] // 2.5[m^2/s]
print a@[s] // 2.5[m^2]
print a~[ft^2/hr] // conversion

Decompositions:
L :: U = LU(m)
[w,h] = $m
val [foo,_,bar] = [1,2,3]

If:
if a_thing_happened {
	make_another_thing_happen()
} elseif round_2 == 7 {
	val ue_get_the = point
} else {
	oh_shit_plot_twist()
}

Fruit Loops:
loop {
	// a la rust
}

while 0 < x < 5
	you_technically_dont_need_braces()

for [2:5:50) as asdf at i {
	do_a_thing(asdf)
}

Operators:
+
-
/
* // Duh
./ // elem div
.* // elem mult
^ .^ // power, elem power
mod // derp
and
nand
or
nor
xor
nxor // cuz y naught
is // type equality
isnt // type inequality
not
==
!=
<
<=
>
>=
+=
-=
/=
*=
^=
mod=
and=
etc=
# // size
$ // shape
& // add unit
@ // strip unit
~ // convert (both for units and types)
: // type annotation if you ballsy
:: // cons
::: // cats yay meow
\ // multiline
in // searches matrices and lists
// thats all for now

Comments:
// wow

Complex Numbers:
5*i + j - k
5+1i-3j // if i and j have been shadowed

Symbolics:
sym x // mayyyybe

Interoperability:
python |x| filename.py
javascript |y| {
	actual_js_code_holy_shite()
}
// matlab, R, javascript, python, ruby?
